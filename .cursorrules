# .cursorrules

You are an expert in TypeScript, Node.js, Next.js App Router, React, Shadcn UI, and Tailwind. You understand and work with a registry-based view system for managing different field types and their implementations.

## Code Style and Structure

- Write concise, technical TypeScript code with accurate examples
- Use functional and declarative programming patterns; avoid classes
- Prefer iteration and modularization over code duplication
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError)
- Structure files: exported component, subcomponents, helpers, static content, types

## File Structure Conventions

### Views Directory (`views/`)
- Each field type has its own directory (e.g., `text`, `select`, `integer`)
- Client implementation in `client/index.tsx`
- Server implementation in `server/index.ts`
- Follow consistent implementation patterns for each field type

### Registry System
- Central registry in `views/registry.ts`
- Maps field types to their implementations
- Provides utility functions:
  - `getClientField`: Get client-side implementation
  - `getServerField`: Get server-side implementation
  - `getFieldTypeFromViewsIndex`: Get field type from viewsIndex

### Field Type Implementation Requirements
Client (`client/index.tsx`):
- `Field` component: Form input component
- `Filter` component: Filter UI component
- `Cell` component: List view cell component
- `controller`: Field-specific logic and validation

Server (`server/index.ts`):
- `getGraphQLSelection`: Define GraphQL query selection
- `transformFilter`: Convert filter params to GraphQL
- `getFilterTypes`: Define available filter types
- `formatFilterLabel`: Format filter display labels

## Component Patterns

### Item Pages
- Use `ItemPageClient.tsx` for client-side logic
- Implement form handling with React Hook Form
- Use `ItemFormFields.tsx` for rendering form fields
- Handle field changes through onChange callbacks
- Implement proper validation and error handling

### List Views
- Use `ListTable.tsx` for displaying data
- Implement filtering and sorting with URL parameters
- Use `FilterBar.tsx` for filter controls
- Handle pagination with cursor-based approach

### Field Components
- Implement consistent interfaces across field types
- Use Shadcn UI components for base UI elements
- Handle validation through field controllers
- Support filtering capabilities where appropriate

## State Management

- Use React's useState for component-level state
- Use Context API for shared state across components
- Use URL parameters for list state (filters, sorting)
- Implement proper form state management
- Handle loading and error states consistently

## Data Flow

- Use GraphQL for data fetching and mutations
- Implement proper data serialization/deserialization
- Use proper type definitions for all data structures
- Handle loading and error states appropriately
- Implement proper caching where needed

## TypeScript Usage

- Use TypeScript for all code
- Define proper interfaces for components and data
- Use proper type definitions for all functions
- Implement proper error handling with types
- Use proper type guards where needed

## UI and Styling

- Use Shadcn UI components consistently
- Implement responsive design with Tailwind
- Follow mobile-first approach
- Use proper accessibility attributes
- Implement proper loading states and transitions

## Best Practices

- Follow React Server Component patterns
- Minimize client-side JavaScript
- Implement proper error boundaries
- Use proper TypeScript practices
- Follow proper accessibility guidelines
- Implement proper testing practices

## Field Type Development Guidelines

When implementing a new field type:

1. Create appropriate directories:
   ```
   views/
     your-field-type/
       client/
         index.tsx
       server/
         index.ts
   ```

2. Implement required components in `client/index.tsx`:
   ```typescript
   export function Field({ field, value, onChange }) {
     // Implementation
   }

   export function Filter({ value, onChange, operator }) {
     // Implementation
   }

   export function Cell({ item, field }) {
     // Implementation
   }

   export const controller = (field) => ({
     path: field.path,
     label: field.label,
     graphqlSelection: field.path,
     deserialize: (value) => ({ kind: 'value', value }),
     serialize: (value) => ({ [field.path]: value }),
     validate: (value) => true
   });
   ```

3. Implement required functions in `server/index.ts`:
   ```typescript
   export function getGraphQLSelection(path) {
     return path;
   }

   export function transformFilter(path, operator, value) {
     // Implementation
   }

   export function getFilterTypes() {
     // Implementation
   }

   export function formatFilterLabel(operator, value) {
     // Implementation
   }
   ```

4. Register the field type in `views/registry.ts`:
   ```typescript
   import * as yourFieldClient from "./your-field-type/client"
   import * as yourFieldServer from "./your-field-type/server"

   export const fieldTypes = {
     // ... existing types ...
     'your-field-type': {
       client: yourFieldClient,
       server: yourFieldServer,
     },
   }
   ```

## Error Handling

- Implement proper error boundaries
- Handle GraphQL errors appropriately
- Implement proper form validation
- Show appropriate error messages
- Log errors properly

## Performance

- Minimize client-side JavaScript
- Implement proper caching
- Use proper code splitting
- Optimize images and assets
- Monitor and optimize performance metrics

## Testing

- Write proper unit tests
- Implement integration tests
- Test error handling
- Test edge cases
- Implement proper CI/CD

## Data Transformation and Field Implementation

### Serialization/Deserialization System

The system uses a registry-based approach where each field type handles its own data transformation between API and UI formats.

#### Deserialization (API to UI)
- Occurs when data is fetched from the API
- Transforms raw API data into UI-friendly format
- Uses `deserializeValue` utility function which:
  - Gets field implementation using `getFieldTypeFromViewsIndex` and `getClientField`
  - Calls field-specific `controller.deserialize` method if available
  - Returns `DeserializedValue` object with format:
    ```typescript
    type DeserializedValue = Record<string, {
      kind: 'value';
      value: any;
    } | {
      kind: 'error';
      errors: any[];
    }>;
    ```

#### Serialization (UI to API)
- Occurs when saving form data back to API
- Transforms UI form values into API-compatible format
- Uses `serializeValue` utility function which:
  - Gets field implementation using `getFieldTypeFromViewsIndex` and `getClientField`
  - Calls field-specific `controller.serialize` method if available
  - Returns plain object ready for API submission

### Field Type Implementation Details

When implementing a new field type, ensure proper data handling:

1. Controller Implementation:
   ```typescript
   export const controller = (field: Field) => ({
     path: field.path,
     label: field.label,
     graphqlSelection: field.path,
     deserialize: (data: Record<string, any>) => {
       const value = data[field.path];
       return {
         kind: 'update' as const,
         initial: value,
         value: value,
       };
     },
     serialize: (value: Value) => ({
       [field.path]: value.value
     }),
     validate: (value: Value) => {
       if (!field.fieldMeta?.isRequired) return true;
       return value?.value != null && value.value !== '';
     }
   });
   ```

2. Field Component Data Flow:
   ```typescript
   export function Field({ 
     field, 
     value, 
     onChange, 
     forceValidation 
   }: FieldProps) {
     const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
       onChange?.({
         kind: 'update',
         value: e.target.value,
         initial: value?.value
       });
     };
     // Component implementation
   }
   ```

3. Data Validation Flow:
   - Field-level validation through `controller.validate`
   - Form-level validation through `useInvalidFields` hook
   - Validation triggered on:
     - Form submission
     - Field blur (optional)
     - When forceValidation is true

4. Error Handling:
   - Handle API errors in deserialization
   - Validate data during serialization
   - Show validation errors in UI
   - Log transformation errors appropriately

### Data Flow Patterns

1. Field Change Flow:
   - User interacts with field component
   - Component calls onChange with new value
   - Parent form updates state
   - Validation runs if configured
   - UI updates to reflect changes

2. Form Submission Flow:
   - Validate all fields
   - Serialize form data
   - Send to API
   - Handle response:
     - Success: Update UI state
     - Error: Show error messages

3. List View Data Flow:
   - Fetch data with filters/sorting
   - Deserialize for display
   - Render in Cell components
   - Handle pagination/filtering

### Best Practices for Field Types

1. Data Transformation:
   - Always implement both serialize and deserialize
   - Handle null/undefined values
   - Preserve data types
   - Document transformation logic

2. Validation:
   - Implement field-specific validation
   - Handle required fields
   - Validate data types
   - Show clear error messages

3. Error Handling:
   - Catch transformation errors
   - Provide fallback values
   - Log errors appropriately
   - Show user-friendly messages

4. Performance:
   - Optimize data transformations
   - Cache computed values
   - Minimize unnecessary updates
   - Handle large datasets efficiently